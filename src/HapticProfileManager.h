

#pragma once


#include "haptic_api.h"
#include "led_api.h"
#include "key_api.h"
#include "audio_api.h"
#include <ArduinoJSON.h>


#define MAX_PROFILES 10
#define PROFILE_VERSION 1


/**
 * The HapticProfile class is used by the comms thread to represent all parts of a 
 * complete device profile in-memory.
 * 
 * It includes the settings that are not strictly haptics related like LED or key settings.
 * 
 * It provides methods to serialize/deserialize the profile to/from JSON.
 * 
 * The different parts of the profile are stored in seperate structs which can be easily
 * exchanged with the threads that need them. The parts of the profile not needed by other 
 * threads are stored in the HapticProfile class itself.
 */
class HapticProfile {
public:
    HapticProfile();
    ~HapticProfile();

    HapticProfile& operator=(JsonObject& obj);
    void toJSON(JsonDocument& doc);

    bool dirty;

//    uint32_t profile_id; // unique id generated by frontend
    String profile_name; // TODO max 20 characters
    String profile_tag;  // TODO max 20 characters

    String profile_desc; // TODO max 50 characters
    int profile_type;    // TODO enum
    bool show_desc;

    hapticConfig haptic_config;
    ledConfig led_config;
    keyConfig key_config;
    audioConfig audio_config;

    // gui config - just one variable for now
    bool gui_enable;
    /* 
        Maybe worth to consider to have profile_name and profile_display_name.
        Its possible that user might want to keep different profile name in profile list and display different name in nano GUI.
        RU: I don't think so. Sounds like an unnecessary complication.
    */
};





/**
 * The HapticProfileManager class is used to manage the profiles in the system.
 * 
 * Profiles can be added, removed or changed.
 * 
 * The profile list can be serialized/deserialized to/from ESP32 SPIFFS for storage, in
 * JSON format.
 */
class HapticProfileManager {
public:
    static HapticProfileManager& getInstance();

    HapticProfile* add(String name);
    HapticProfile* operator[](String name);
    HapticProfile* operator[](int index);
    HapticProfile* get(String name);
    void remove(String name);
    int size();

    HapticProfile* setCurrentProfile(String name);
    HapticProfile* getCurrentProfile();

    void fromSPIFFS();
    void toSPIFFS();
protected:
    HapticProfile profiles[MAX_PROFILES];
    HapticProfile* current_profile;
private:
    HapticProfileManager();
    ~HapticProfileManager();
    static HapticProfileManager instance;
};